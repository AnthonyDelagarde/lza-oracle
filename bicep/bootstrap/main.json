{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "languageVersion": "2.1-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
    "_EXPERIMENTAL_FEATURES_ENABLED": [
      "Extensibility"
    ],
    "_generator": {
      "name": "bicep",
      "version": "0.23.1.45101",
      "templateHash": "8757456217023446740"
    }
  },
  "definitions": {
    "vnetType": {
      "type": "object",
      "properties": {
        "virtualNetworkName": {
          "type": "string"
        },
        "addressPrefixes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diagnosticSettings": {
          "$ref": "#/definitions/_1.diagnosticSettingType",
          "nullable": true
        },
        "roleAssignments": {
          "$ref": "#/definitions/_1.roleAssignmentType",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/_1.lockType",
          "nullable": true
        }
      }
    },
    "pipType": {
      "type": "object",
      "properties": {
        "publicIPAddressName": {
          "type": "string"
        },
        "diagnosticSettings": {
          "$ref": "#/definitions/_1.diagnosticSettingType",
          "nullable": true
        },
        "roleAssignments": {
          "$ref": "#/definitions/_1.roleAssignmentType",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/_1.lockType",
          "nullable": true
        }
      }
    },
    "nsgType": {
      "type": "object",
      "properties": {
        "networkSecurityGroupName": {
          "type": "string"
        },
        "diagnosticSettings": {
          "$ref": "#/definitions/_1.diagnosticSettingType",
          "nullable": true
        },
        "roleAssignments": {
          "$ref": "#/definitions/_1.roleAssignmentType",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/_1.lockType",
          "nullable": true
        }
      }
    },
    "nicType": {
      "type": "object",
      "properties": {
        "networkInterfaceName": {
          "type": "string"
        },
        "virtualNetworkName": {
          "type": "string"
        },
        "subnetName": {
          "type": "string"
        },
        "publicIPAddressName": {
          "type": "string"
        },
        "diagnosticSettings": {
          "$ref": "#/definitions/_1.diagnosticSettingType",
          "nullable": true
        },
        "roleAssignments": {
          "$ref": "#/definitions/_1.roleAssignmentType",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/_1.lockType",
          "nullable": true
        }
      }
    },
    "dataDiskType": {
      "type": "object",
      "properties": {
        "diskName": {
          "type": "string"
        },
        "diskSizeGB": {
          "type": "int"
        },
        "type": {
          "type": "string"
        },
        "lun": {
          "type": "int"
        },
        "virtualMachineName": {
          "type": "string"
        },
        "avZone": {
          "type": "string"
        },
        "diagnosticSettings": {
          "$ref": "#/definitions/_1.diagnosticSettingType",
          "nullable": true
        },
        "roleAssignments": {
          "$ref": "#/definitions/_1.roleAssignmentType",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/_1.lockType",
          "nullable": true
        }
      }
    },
    "vmType": {
      "type": "object",
      "properties": {
        "virtualMachineName": {
          "type": "string"
        },
        "vmSize": {
          "type": "string"
        },
        "adminUsername": {
          "type": "string"
        },
        "sshPublicKey": {
          "type": "string"
        },
        "avZone": {
          "type": "string"
        },
        "diagnosticSettings": {
          "$ref": "#/definitions/_1.diagnosticSettingType",
          "nullable": true
        },
        "roleAssignments": {
          "$ref": "#/definitions/_1.roleAssignmentType",
          "nullable": true
        },
        "lock": {
          "$ref": "#/definitions/_1.lockType",
          "nullable": true
        }
      }
    },
    "_1.diagnosticSettingType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of diagnostic setting."
            }
          },
          "logCategoriesAndGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                  }
                },
                "categoryGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
            }
          },
          "metricCategories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                  }
                },
                "enabled": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                  }
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
            }
          },
          "vmAgentConfiguration": {
            "type": "object",
            "properties": {
              "publisher": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "VM extension publisher"
                }
              },
              "type": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "VM extension type"
                }
              },
              "typeHandlerVersion": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Type handler version"
                }
              },
              "autoUpgradeMinorVersion": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Auto upgrade minor version"
                }
              },
              "enableAutomaticUpgrade": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Enable automatic upgrade"
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. VM agent configuration"
            }
          },
          "enableVmGuestMonitoring": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Enable VM guest monitoring"
            }
          },
          "logAnalyticsDestinationType": {
            "type": "string",
            "allowedValues": [
              "AzureDiagnostics",
              "Dedicated"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
            }
          },
          "workspaceResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "storageAccountResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "eventHubAuthorizationRuleResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
          },
          "eventHubName": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
            }
          },
          "marketplacePartnerResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../bicep_units/modules/common_infrastructure/common_types.bicep"
        }
      }
    },
    "_1.lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../bicep_units/modules/common_infrastructure/common_types.bicep"
        }
      }
    },
    "_1.roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true,
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../bicep_units/modules/common_infrastructure/common_types.bicep"
        }
      }
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "oraGroup1",
      "metadata": {
        "description": "Name of the Resource Group"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "centralindia",
      "metadata": {
        "description": "Location"
      }
    },
    "oracleImageReference": {
      "type": "object",
      "metadata": {
        "description": "Oracle VM Image reference"
      }
    },
    "virtualNetworks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/vnetType"
      },
      "defaultValue": []
    },
    "vnetSubnets": {
      "type": "array",
      "defaultValue": []
    },
    "networkInterfaces": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/nicType"
      },
      "defaultValue": []
    },
    "publicIPAddresses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/pipType"
      },
      "defaultValue": []
    },
    "networkSecurityGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/nsgType"
      },
      "defaultValue": []
    },
    "virtualMachines": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/vmType"
      },
      "defaultValue": []
    },
    "dataDisks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/dataDiskType"
      },
      "defaultValue": []
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to be added to the resources"
      }
    }
  },
  "variables": {
    "rgName": "[format('rg-{0}', parameters('resourceGroupName'))]",
    "_1.builtInRoleNames": {
      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
    }
  },
  "resources": {
    "rg": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "rg",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceGroupName": {
            "value": "[variables('rgName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "8568761595343932625"
            },
            "name": "Common infrastructure",
            "description": "This module provisions a Resource Group",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "_1.diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "vmAgentConfiguration": {
                    "type": "object",
                    "properties": {
                      "publisher": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension publisher"
                        }
                      },
                      "type": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension type"
                        }
                      },
                      "typeHandlerVersion": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Type handler version"
                        }
                      },
                      "autoUpgradeMinorVersion": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Auto upgrade minor version"
                        }
                      },
                      "enableAutomaticUpgrade": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Enable automatic upgrade"
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. VM agent configuration"
                    }
                  },
                  "enableVmGuestMonitoring": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable VM guest monitoring"
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "common_types.bicep"
                }
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "common_types.bicep"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "common_types.bicep"
                }
              }
            }
          },
          "parameters": {
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "oraGroup",
              "metadata": {
                "description": "Name of the Resource Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "westeurope",
              "metadata": {
                "description": "Location"
              }
            },
            "lock": {
              "$ref": "#/definitions/_1.lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/_1.roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be added to the resources"
              }
            }
          },
          "variables": {
            "_1.builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "resourceGroup": {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2023-07-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "resourceGroupRoleAssignments": {
              "copy": {
                "name": "resourceGroupRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('_1.builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('_1.builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "resourceGroup"
              ]
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "resourceGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.1-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
                    "_EXPERIMENTAL_FEATURES_ENABLED": [
                      "Extensibility"
                    ],
                    "_generator": {
                      "name": "bicep",
                      "version": "0.23.1.45101",
                      "templateHash": "15751875217880395353"
                    }
                  },
                  "definitions": {
                    "_1.diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                            }
                          },
                          "vmAgentConfiguration": {
                            "type": "object",
                            "properties": {
                              "publisher": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "VM extension publisher"
                                }
                              },
                              "type": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "VM extension type"
                                }
                              },
                              "typeHandlerVersion": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Type handler version"
                                }
                              },
                              "autoUpgradeMinorVersion": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Auto upgrade minor version"
                                }
                              },
                              "enableAutomaticUpgrade": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Enable automatic upgrade"
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. VM agent configuration"
                            }
                          },
                          "enableVmGuestMonitoring": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable VM guest monitoring"
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../common_types.bicep"
                        }
                      }
                    },
                    "_1.lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../common_types.bicep"
                        }
                      }
                    },
                    "_1.roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true,
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "../common_types.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "lock": {
                      "$ref": "#/definitions/_1.lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    }
                  },
                  "variables": {
                    "_1.builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('resourceGroupName')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "resourceGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[parameters('resourceGroupName')]"
            }
          }
        }
      }
    },
    "networks": {
      "copy": {
        "name": "networks",
        "count": "[length(parameters('virtualNetworks'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}{1}', parameters('virtualNetworks')[copyIndex()].virtualNetworkName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworks')[copyIndex()].virtualNetworkName]"
          },
          "vnetSubnets": {
            "value": "[parameters('vnetSubnets')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('virtualNetworks')[copyIndex()].addressPrefixes]"
          },
          "diagnosticSettings": "[if(not(empty(tryGet(parameters('virtualNetworks')[copyIndex()], 'diagnosticSettings'))), createObject('value', parameters('virtualNetworks')[copyIndex()].diagnosticSettings), createObject('value', createArray()))]",
          "roleAssignments": "[if(not(empty(tryGet(parameters('virtualNetworks')[copyIndex()], 'roleAssignments'))), createObject('value', parameters('virtualNetworks')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "lock": "[if(not(empty(tryGet(parameters('virtualNetworks')[copyIndex()], 'lock'))), createObject('value', parameters('virtualNetworks')[copyIndex()].lock), createObject('value', null()))]",
          "enableTelemetry": {
            "value": false
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "15539340172584389764"
            },
            "name": "vnet",
            "description": "This module provisions a virtual network for hosting Oracle VMs",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "_1.diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "vmAgentConfiguration": {
                    "type": "object",
                    "properties": {
                      "publisher": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension publisher"
                        }
                      },
                      "type": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension type"
                        }
                      },
                      "typeHandlerVersion": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Type handler version"
                        }
                      },
                      "autoUpgradeMinorVersion": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Auto upgrade minor version"
                        }
                      },
                      "enableAutomaticUpgrade": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Enable automatic upgrade"
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. VM agent configuration"
                    }
                  },
                  "enableVmGuestMonitoring": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable VM guest monitoring"
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "vNet",
              "metadata": {
                "description": "Name of the VNET"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location"
              }
            },
            "vnetAddressPrefix": {
              "type": "array",
              "metadata": {
                "description": "VNET Address prefix"
              }
            },
            "vnetSubnets": {
              "type": "array",
              "metadata": {
                "description": "Subnets "
              }
            },
            "vnetResourcePrefix": {
              "type": "string",
              "defaultValue": "vnet"
            },
            "subnetResourcePrefix": {
              "type": "string",
              "defaultValue": "snet"
            },
            "lock": {
              "$ref": "#/definitions/_1.lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/_1.roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/_1.diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be added to the resources"
              }
            }
          },
          "variables": {
            "subnets": "[filter(parameters('vnetSubnets'), lambda('x', equals(lambdaVariables('x').virtualNetworkName, parameters('virtualNetworkName'))))]",
            "vnetName": "[format('{0}-{1}', parameters('vnetResourcePrefix'), parameters('virtualNetworkName'))]",
            "_1.builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "virtualNetwork": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-04-01",
              "name": "[variables('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(variables('subnets'))]",
                    "input": {
                      "name": "[format('{0}-{1}', parameters('subnetResourcePrefix'), variables('subnets')[copyIndex('subnets')].subnetName)]",
                      "properties": {
                        "addressPrefix": "[variables('subnets')[copyIndex('subnets')].addressPrefix]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('vnetAddressPrefix')]"
                }
              },
              "tags": "[parameters('tags')]"
            },
            "virtualNetworkLock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', variables('vnetName'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', variables('vnetName')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetworkRoleAssignments": {
              "copy": {
                "name": "virtualNetworkRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', variables('vnetName'))]",
              "name": "[guid(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('_1.builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('_1.builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetworkDiagnosticSettings": {
              "copy": {
                "name": "virtualNetworkDiagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', variables('vnetName'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('vnetName')))]",
              "properties": {
                "storageAccountId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].storageAccountId, null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].eventHubAuthorizationRuleId, null())]",
                "eventHubName": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].eventHubName, null())]",
                "workspaceId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, null())]",
                "metrics": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].metricCategories, createArray())]",
                "logs": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].logCategoriesAndGroups, createArray())]",
                "marketplacePartnerId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketPlacePartnerResourceId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].marketPlacePartnerResourceId, null())]",
                "logAnalyticsDestinationType": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].logAnalyticsDestinationType, null())]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          },
          "outputs": {
            "diagId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), 'Microsoft.Insights/diagnosticSettings', coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[0], 'name'), format('{0}-diagnosticSettings', variables('vnetName'))))]"
            },
            "virtualNetworkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "nsgs": {
      "copy": {
        "name": "nsgs",
        "count": "[length(parameters('networkSecurityGroups'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}{1}', parameters('networkSecurityGroups')[copyIndex()].networkSecurityGroupName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "networkSecurityGroupName": {
            "value": "[parameters('networkSecurityGroups')[copyIndex()].networkSecurityGroupName]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "diagnosticSettings": "[if(not(empty(tryGet(parameters('networkSecurityGroups')[copyIndex()], 'diagnosticSettings'))), createObject('value', parameters('networkSecurityGroups')[copyIndex()].diagnosticSettings), createObject('value', createArray()))]",
          "roleAssignments": "[if(not(empty(tryGet(parameters('networkSecurityGroups')[copyIndex()], 'roleAssignments'))), createObject('value', parameters('networkSecurityGroups')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "lock": "[if(not(empty(tryGet(parameters('networkSecurityGroups')[copyIndex()], 'lock'))), createObject('value', parameters('networkSecurityGroups')[copyIndex()].lock), createObject('value', null()))]",
          "enableTelemetry": {
            "value": false
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "2173120469984617684"
            },
            "name": "nsg",
            "description": "This module provisions a Blank network security group",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "_1.diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "vmAgentConfiguration": {
                    "type": "object",
                    "properties": {
                      "publisher": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension publisher"
                        }
                      },
                      "type": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension type"
                        }
                      },
                      "typeHandlerVersion": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Type handler version"
                        }
                      },
                      "autoUpgradeMinorVersion": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Auto upgrade minor version"
                        }
                      },
                      "enableAutomaticUpgrade": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Enable automatic upgrade"
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. VM agent configuration"
                    }
                  },
                  "enableVmGuestMonitoring": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable VM guest monitoring"
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            }
          },
          "parameters": {
            "networkSecurityGroupName": {
              "type": "string",
              "defaultValue": "SecGroupNet",
              "metadata": {
                "description": "Name of the Network Security Group"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location"
              }
            },
            "nsgGroupPrefix": {
              "type": "string",
              "defaultValue": "nsg"
            },
            "lock": {
              "$ref": "#/definitions/_1.lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/_1.roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/_1.diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be added to the resources"
              }
            }
          },
          "variables": {
            "nsgName": "[format('{0}-{1}', parameters('nsgGroupPrefix'), parameters('networkSecurityGroupName'))]",
            "_1.builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "networkSecurityGroup": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-04-01",
              "name": "[variables('nsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            "nsgLock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', variables('nsgName')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "nsgRoleAssignments": {
              "copy": {
                "name": "nsgRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]",
              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('_1.builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('_1.builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "nsgDiagnosticSettings": {
              "copy": {
                "name": "nsgDiagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('nsgName')))]",
              "properties": {
                "storageAccountId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].storageAccountId, null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].eventHubAuthorizationRuleId, null())]",
                "eventHubName": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].eventHubName, null())]",
                "workspaceId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, null())]",
                "metrics": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].metricCategories, createArray())]",
                "logs": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].logCategoriesAndGroups, createArray())]",
                "marketplacePartnerId": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketPlacePartnerResourceId'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].marketPlacePartnerResourceId, null())]",
                "logAnalyticsDestinationType": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].logAnalyticsDestinationType, null())]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "networks"
      ]
    },
    "subnets": {
      "copy": {
        "name": "subnets",
        "count": "[length(parameters('vnetSubnets'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}{1}', parameters('vnetSubnets')[copyIndex()].subnetName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetName": {
            "value": "[parameters('vnetSubnets')[copyIndex()].subnetName]"
          },
          "virtualNetworkName": {
            "value": "[parameters('vnetSubnets')[copyIndex()].virtualNetworkName]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('vnetSubnets')[copyIndex()].addressPrefix]"
          },
          "networkSecurityGroupId": {
            "value": "[reference(format('nsgs[{0}]', 0)).outputs.resourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "13615280112740530823"
            },
            "name": "subnet",
            "description": "This module provisions subnets for a vnet",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "vNet",
              "metadata": {
                "description": "Name of the VNET"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "Subnet",
              "metadata": {
                "description": "Name of the subnet in the virtual network"
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/24",
              "metadata": {
                "description": "Subnet Address prefix"
              }
            },
            "networkSecurityGroupId": {
              "type": "string",
              "metadata": {
                "description": "Network security group"
              }
            },
            "vnetResourcePrefix": {
              "type": "string",
              "defaultValue": "vnet"
            },
            "subnetResourcePrefix": {
              "type": "string",
              "defaultValue": "snet"
            }
          },
          "resources": {
            "existingVirtualNetwork": {
              "existing": true,
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-{1}', parameters('vnetResourcePrefix'), parameters('virtualNetworkName'))]"
            },
            "subnet": {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', format('{0}-{1}', parameters('vnetResourcePrefix'), parameters('virtualNetworkName')), format('{0}-{1}', parameters('subnetResourcePrefix'), parameters('subnetName')))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[parameters('networkSecurityGroupId')]"
                }
              },
              "dependsOn": [
                "existingVirtualNetwork"
              ]
            }
          },
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', format('{0}-{1}', parameters('vnetResourcePrefix'), parameters('virtualNetworkName')), format('{0}-{1}', parameters('subnetResourcePrefix'), parameters('subnetName')))]"
            }
          }
        }
      },
      "dependsOn": [
        "networks",
        "[format('nsgs[{0}]', 0)]"
      ]
    },
    "pips": {
      "copy": {
        "name": "pips",
        "count": "[length(parameters('publicIPAddresses'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('pip-{0}{1}', parameters('publicIPAddresses')[copyIndex()].publicIPAddressName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[format('pip-{0}', parameters('publicIPAddresses')[copyIndex()].publicIPAddressName)]"
          },
          "diagnosticSettings": "[if(not(empty(tryGet(parameters('publicIPAddresses')[copyIndex()], 'diagnosticSettings'))), createObject('value', parameters('publicIPAddresses')[copyIndex()].diagnosticSettings), createObject('value', createArray()))]",
          "roleAssignments": "[if(not(empty(tryGet(parameters('publicIPAddresses')[copyIndex()], 'roleAssignments'))), createObject('value', parameters('publicIPAddresses')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "lock": "[if(not(empty(tryGet(parameters('publicIPAddresses')[copyIndex()], 'lock'))), createObject('value', parameters('publicIPAddresses')[copyIndex()].lock), createObject('value', null()))]",
          "enableTelemetry": {
            "value": false
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "4196164240674285199"
            },
            "name": "Public IP Addresses",
            "description": "This module deploys a Public IP Address.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "dnsSettingsType": {
              "type": "object",
              "properties": {
                "domainNameLabel": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                  }
                },
                "domainNameLabelScope": {
                  "type": "string",
                  "allowedValues": [
                    "",
                    "NoReuse",
                    "ResourceGroupReuse",
                    "SubscriptionReuse",
                    "TenantReuse"
                  ],
                  "metadata": {
                    "description": "Required. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                  }
                },
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                  }
                },
                "reverseFqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                  }
                }
              }
            },
            "ddosSettingsType": {
              "type": "object",
              "properties": {
                "ddosProtectionPlan": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "description": "Required. The DDoS protection plan ID associated with the public IP address."
                  }
                },
                "protectionMode": {
                  "type": "string",
                  "allowedValues": [
                    "Enabled"
                  ],
                  "metadata": {
                    "description": "Required. The DDoS protection policy customizations."
                  }
                }
              }
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Public IP Address."
              }
            },
            "publicIpPrefixResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
              }
            },
            "publicIPAllocationMethod": {
              "type": "string",
              "defaultValue": "Static",
              "allowedValues": [
                "Dynamic",
                "Static"
              ],
              "metadata": {
                "description": "Optional. The public IP address allocation method."
              }
            },
            "zones": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
              }
            },
            "publicIPAddressVersion": {
              "type": "string",
              "defaultValue": "IPv4",
              "allowedValues": [
                "IPv4",
                "IPv6"
              ],
              "metadata": {
                "description": "Optional. IP address version."
              }
            },
            "dnsSettings": {
              "$ref": "#/definitions/dnsSettingsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The DNS settings of the public IP address."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Name of a public IP address SKU."
              }
            },
            "skuTier": {
              "type": "string",
              "defaultValue": "Regional",
              "allowedValues": [
                "Global",
                "Regional"
              ],
              "metadata": {
                "description": "Optional. Tier of a public IP address SKU."
              }
            },
            "ddosSettings": {
              "$ref": "#/definitions/ddosSettingsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "idleTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 4,
              "metadata": {
                "description": "Optional. The idle timeout of the public IP address."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "publicIpAddress": {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('skuTier')]"
              },
              "zones": "[parameters('zones')]",
              "properties": {
                "ddosSettings": "[parameters('ddosSettings')]",
                "dnsSettings": "[parameters('dnsSettings')]",
                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                "ipTags": []
              }
            },
            "publicIpAddress_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "publicIpAddress"
              ]
            },
            "publicIpAddress_roleAssignments": {
              "copy": {
                "name": "publicIpAddress_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "publicIpAddress"
              ]
            },
            "publicIpAddress_diagnosticSettings": {
              "copy": {
                "name": "publicIpAddress_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                "logs": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())))]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "publicIpAddress"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the public IP address was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the public IP address."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the public IP address."
              },
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
            },
            "ipAddress": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the public IP address resource."
              },
              "value": "[if(contains(reference('publicIpAddress'), 'ipAddress'), reference('publicIpAddress').ipAddress, '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('publicIpAddress', '2023-04-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "rg"
      ]
    },
    "nics": {
      "copy": {
        "name": "nics",
        "count": "[length(parameters('networkInterfaces'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('nic-{0}{1}', parameters('networkInterfaces')[copyIndex()].networkInterfaceName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[format('nic-{0}', parameters('networkInterfaces')[copyIndex()].networkInterfaceName)]"
          },
          "enableAcceleratedNetworking": {
            "value": true
          },
          "ipConfigurations": {
            "value": [
              {
                "name": "ipconfig1",
                "subnetResourceId": "[reference(format('subnets[{0}]', 0)).outputs.subnetId.value]",
                "publicIpAddressResourceId": "[reference(format('pips[{0}]', copyIndex())).outputs.resourceId.value]"
              }
            ]
          },
          "diagnosticSettings": "[if(not(empty(tryGet(parameters('networkInterfaces')[copyIndex()], 'diagnosticSettings'))), createObject('value', parameters('networkInterfaces')[copyIndex()].diagnosticSettings), createObject('value', createArray()))]",
          "roleAssignments": "[if(not(empty(tryGet(parameters('networkInterfaces')[copyIndex()], 'roleAssignments'))), createObject('value', parameters('networkInterfaces')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "lock": "[if(not(empty(tryGet(parameters('networkInterfaces')[copyIndex()], 'lock'))), createObject('value', parameters('networkInterfaces')[copyIndex()].lock), createObject('value', null()))]",
          "enableTelemetry": {
            "value": false
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "10892206856491253667"
            },
            "name": "Network Interface",
            "description": "This module deploys a Network Interface.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the network interface."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "enableIPForwarding": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
              }
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If the network interface is accelerated networking enabled."
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
              }
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The network security group (NSG) to attach to the network interface."
              }
            },
            "auxiliaryMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "Floating",
                "MaxConnections",
                "None"
              ],
              "metadata": {
                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
              }
            },
            "auxiliarySku": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "A1",
                "A2",
                "A4",
                "A8",
                "None"
              ],
              "metadata": {
                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
              }
            },
            "disableTcpStateTracking": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
              }
            },
            "ipConfigurations": {
              "type": "array",
              "metadata": {
                "description": "Required. A list of IPConfigurations of the network interface."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.network-network-interface.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "networkInterface": {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "ipConfigurations",
                    "count": "[length(parameters('ipConfigurations'))]",
                    "input": {
                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                      "properties": {
                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                        "subnet": {
                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                        },
                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                      }
                    }
                  }
                ],
                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                "auxiliarySku": "[parameters('auxiliarySku')]",
                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
              }
            },
            "networkInterface_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkInterface"
              ]
            },
            "networkInterface_diagnosticSettings": {
              "copy": {
                "name": "networkInterface_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "metrics": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics', 'timeGrain', null(), 'enabled', true())))]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "networkInterface"
              ]
            },
            "networkInterface_roleAssignments": {
              "copy": {
                "name": "networkInterface_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkInterface"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed resource."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed resource."
              },
              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed resource."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('networkInterface', '2023-04-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "nsgs",
        "pips",
        "subnets"
      ]
    },
    "vms": {
      "copy": {
        "name": "vms",
        "count": "[length(parameters('virtualMachines'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vm-{0}{1}', parameters('virtualMachines')[copyIndex()].virtualMachineName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vmName": {
            "value": "[parameters('virtualMachines')[copyIndex()].virtualMachineName]"
          },
          "adminUsername": {
            "value": "[parameters('virtualMachines')[copyIndex()].adminUsername]"
          },
          "sshPublicKey": {
            "value": "[parameters('virtualMachines')[copyIndex()].sshPublicKey]"
          },
          "avZone": {
            "value": "[parameters('virtualMachines')[copyIndex()].avZone]"
          },
          "nicId": {
            "value": "[reference(format('nics[{0}]', copyIndex())).outputs.resourceId.value]"
          },
          "vmSize": {
            "value": "[parameters('virtualMachines')[copyIndex()].vmSize]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "diagnosticSettings": "[if(not(empty(tryGet(parameters('virtualMachines')[copyIndex()], 'diagnosticSettings'))), createObject('value', parameters('virtualMachines')[copyIndex()].diagnosticSettings), createObject('value', createArray()))]",
          "roleAssignments": "[if(not(empty(tryGet(parameters('virtualMachines')[copyIndex()], 'roleAssignments'))), createObject('value', parameters('virtualMachines')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "lock": "[if(not(empty(tryGet(parameters('virtualMachines')[copyIndex()], 'lock'))), createObject('value', parameters('virtualMachines')[copyIndex()].lock), createObject('value', null()))]",
          "enableTelemetry": {
            "value": false
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "oracleImageReference": {
            "value": "[parameters('oracleImageReference')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "17157013852743594232"
            },
            "name": "vm",
            "description": "This module provisions a virtual machine for hosting Oracle databases",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "_1.diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "vmAgentConfiguration": {
                    "type": "object",
                    "properties": {
                      "publisher": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension publisher"
                        }
                      },
                      "type": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension type"
                        }
                      },
                      "typeHandlerVersion": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Type handler version"
                        }
                      },
                      "autoUpgradeMinorVersion": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Auto upgrade minor version"
                        }
                      },
                      "enableAutomaticUpgrade": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Enable automatic upgrade"
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. VM agent configuration"
                    }
                  },
                  "enableVmGuestMonitoring": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable VM guest monitoring"
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            }
          },
          "parameters": {
            "vmName": {
              "type": "string",
              "defaultValue": "oravm",
              "metadata": {
                "description": "The name of Virtual Machine."
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Username for the Virtual Machine."
              }
            },
            "sshPublicKey": {
              "type": "string",
              "metadata": {
                "description": "SSH Public key"
              }
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2ds_v5",
              "metadata": {
                "description": "The size of the VM"
              }
            },
            "avZone": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Availability zone"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources."
              }
            },
            "nicId": {
              "type": "string",
              "metadata": {
                "description": "ID of the network interface"
              }
            },
            "vmResourcePrefix": {
              "type": "string",
              "defaultValue": "vm"
            },
            "oracleImageReference": {
              "type": "object",
              "metadata": {
                "description": "Oracle VM Image reference"
              }
            },
            "lock": {
              "$ref": "#/definitions/_1.lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/_1.roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/_1.diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be added to the resources"
              }
            }
          },
          "variables": {
            "virtualMachineName": "[format('{0}-{1}', parameters('vmResourcePrefix'), parameters('vmName'))]",
            "sshConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                    "keyData": "[parameters('sshPublicKey')]"
                  }
                ]
              }
            },
            "_1.builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "vm": {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[variables('virtualMachineName')]",
              "location": "[parameters('location')]",
              "zones": [
                "[parameters('avZone')]"
              ],
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": "[parameters('tags')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    }
                  },
                  "imageReference": "[parameters('oracleImageReference')]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[parameters('nicId')]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[variables('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "linuxConfiguration": "[variables('sshConfiguration')]"
                }
              }
            },
            "virtuaMachineLock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', variables('virtualMachineName'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', variables('virtualMachineName')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "vm"
              ]
            },
            "virtualNetworkRoleAssignments": {
              "copy": {
                "name": "virtualNetworkRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', variables('virtualMachineName'))]",
              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('_1.builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('_1.builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "vm"
              ]
            },
            "vm_logAnalyticsWorkspace": {
              "copy": {
                "name": "vm_logAnalyticsWorkspace",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "condition": "[coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].enableVmGuestMonitoring]",
              "existing": true,
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "subscriptionId": "[split(if(not(empty(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId)), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, '//'), '/')[2]]",
              "resourceGroup": "[split(if(not(empty(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId)), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, '////'), '/')[4]]",
              "name": "[last(split(if(not(empty(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId)), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, format('law-{0}', copyIndex())), '/'))]"
            },
            "extension": {
              "copy": {
                "name": "extension",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "condition": "[coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].enableVmGuestMonitoring]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}-{1}-{2}', resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName')), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].name, copyIndex())]",
              "properties": {
                "publisher": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].vmAgentConfiguration, 'publisher')]",
                "type": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].vmAgentConfiguration, 'type')]",
                "typeHandlerVersion": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'vmAgentConfiguration', 'typeHandlerVersion'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].vmAgentConfiguration.typeHandlerVersion, '1.21')]",
                "autoUpgradeMinorVersion": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'vmAgentConfiguration', 'autoUpgradeMinorVersion'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].vmAgentConfiguration.autoUpgradeMinorVersion, true())]",
                "enableAutomaticUpgrade": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'vmAgentConfiguration', 'enableAutomaticUpgrade'))), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].vmAgentConfiguration.enableAutomaticUpgrade, true())]",
                "settings": {
                  "workspaceId": "[coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId]"
                },
                "protectedSettings": {
                  "workspaceKey": "[if(not(empty(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId)), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, '//'), '/')[2], split(if(not(empty(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId)), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, '////'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(if(not(empty(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId)), coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()].workspaceResourceId, format('law-{0}', copyIndex())), '/'))), '2021-06-01').primarySharedKey, '')]"
                }
              },
              "dependsOn": [
                "vm",
                "[format('vm_logAnalyticsWorkspace[{0}]', copyIndex())]"
              ]
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          },
          "outputs": {
            "vmId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
            },
            "vmName": {
              "type": "string",
              "value": "[variables('virtualMachineName')]"
            }
          }
        }
      },
      "dependsOn": [
        "nics"
      ]
    },
    "storage": {
      "copy": {
        "name": "storage",
        "count": "[length(parameters('dataDisks'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('disk-{0}{1}', parameters('dataDisks')[copyIndex()].diskName, copyIndex())]",
      "resourceGroup": "[variables('rgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "diskName": {
            "value": "[parameters('dataDisks')[copyIndex()].diskName]"
          },
          "diskSize": {
            "value": "[parameters('dataDisks')[copyIndex()].diskSizeGB]"
          },
          "diskType": {
            "value": "[parameters('dataDisks')[copyIndex()].type]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "lun": {
            "value": "[parameters('dataDisks')[copyIndex()].lun]"
          },
          "vmName": {
            "value": "[format('vm-{0}', parameters('dataDisks')[copyIndex()].virtualMachineName)]"
          },
          "avZone": {
            "value": "[parameters('dataDisks')[copyIndex()].avZone]"
          },
          "roleAssignments": "[if(not(empty(tryGet(parameters('dataDisks')[copyIndex()], 'roleAssignments'))), createObject('value', parameters('dataDisks')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
          "lock": "[if(not(empty(tryGet(parameters('dataDisks')[copyIndex()], 'lock'))), createObject('value', parameters('dataDisks')[copyIndex()].lock), createObject('value', null()))]",
          "enableTelemetry": {
            "value": false
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.1-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "This template uses ARM features that are experimental. Experimental features should be enabled for testing purposes only, as there are no guarantees about the quality or stability of these features. Do not enable these settings for any production usage, or your production environment may be subject to breaking.",
            "_EXPERIMENTAL_FEATURES_ENABLED": [
              "Extensibility"
            ],
            "_generator": {
              "name": "bicep",
              "version": "0.23.1.45101",
              "templateHash": "12741393498467956098"
            },
            "name": "datadisk",
            "description": "This module provisions a data disk and attaches it to a given VM",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "_1.diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Enabled or Disabled flag for a Diagnostic Metric category for a resource type this setting is applied to."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to '' to disable log collection."
                    }
                  },
                  "vmAgentConfiguration": {
                    "type": "object",
                    "properties": {
                      "publisher": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension publisher"
                        }
                      },
                      "type": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "VM extension type"
                        }
                      },
                      "typeHandlerVersion": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Type handler version"
                        }
                      },
                      "autoUpgradeMinorVersion": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Auto upgrade minor version"
                        }
                      },
                      "enableAutomaticUpgrade": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Enable automatic upgrade"
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. VM agent configuration"
                    }
                  },
                  "enableVmGuestMonitoring": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable VM guest monitoring"
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            },
            "_1.roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true,
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "../common_infrastructure/common_types.bicep"
                }
              }
            }
          },
          "parameters": {
            "diskName": {
              "type": "string",
              "metadata": {
                "description": "Disk name"
              }
            },
            "diskSize": {
              "type": "int",
              "metadata": {
                "description": "Disk size"
              }
            },
            "lun": {
              "type": "int",
              "metadata": {
                "description": "Logical unit"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location"
              }
            },
            "vmName": {
              "type": "string",
              "defaultValue": "oravm",
              "metadata": {
                "description": "The name of Virtual Machine."
              }
            },
            "diskType": {
              "type": "string",
              "defaultValue": "Premium_ZRS",
              "metadata": {
                "description": "The type of storage account"
              }
            },
            "avZone": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Availability zone"
              }
            },
            "diskResourcePrefix": {
              "type": "string",
              "defaultValue": "disk"
            },
            "lock": {
              "$ref": "#/definitions/_1.lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/_1.roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/_1.diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable telemetry via a Globally Unique Identifier (GUID)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be added to the resources"
              }
            }
          },
          "variables": {
            "dataDiskName": "[format('{0}-{1}', parameters('diskResourcePrefix'), parameters('diskName'))]",
            "_1.builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "data_disk": {
              "type": "Microsoft.Compute/disks",
              "apiVersion": "2023-04-02",
              "name": "[variables('dataDiskName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('diskType')]"
              },
              "zones": [
                "[parameters('avZone')]"
              ],
              "properties": {
                "creationData": {
                  "createOption": "Empty"
                },
                "diskSizeGB": "[parameters('diskSize')]"
              },
              "tags": "[parameters('tags')]"
            },
            "vmDisk": {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('vmName')]",
              "location": "[parameters('location')]",
              "properties": {
                "storageProfile": {
                  "dataDisks": [
                    {
                      "createOption": "Attach",
                      "managedDisk": {
                        "id": "[resourceId('Microsoft.Compute/disks', variables('dataDiskName'))]"
                      },
                      "lun": "[parameters('lun')]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "data_disk"
              ]
            },
            "dataDiskLock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.Compute/disks/{0}', variables('dataDiskName'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', variables('dataDiskName')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "data_disk"
              ]
            },
            "dataDiskRoleAssignments": {
              "copy": {
                "name": "dataDiskRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Compute/disks/{0}', variables('dataDiskName'))]",
              "name": "[guid(resourceId('Microsoft.Compute/disks', variables('dataDiskName')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('_1.builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('_1.builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "data_disk"
              ]
            },
            "defaultTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('pid-47ed15a6-730a-4827-bcb4-0fd963ffbd82-{0}', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          },
          "outputs": {
            "dataDiskId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/disks', variables('dataDiskName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "vms"
      ]
    }
  }
}
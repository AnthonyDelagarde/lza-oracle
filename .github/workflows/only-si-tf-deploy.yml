name: Only Deploy Single Instance Oracle DB on Azure with Terraform
on:
  workflow_dispatch: {}
  push:
    branches: [ feature/*, fix/* ]
    paths:
      - ".github/workflows/only-si-tf-deploy.yml"
      - "terraform/bootstrap/single_instance/**"
      - "terraform_units/**"
      - "ansible/bootstrap/oracle/**"
env:
  TF_LOG: "INFO"
  AZ_LOCATION: "eastus" # can be parameterized
  AZ_RG_BASENAME: "Oracle-test" # can be parameterized

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write
  
jobs:
  terraform:
    name: '🔧 Terraform'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
  
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/bootstrap/single_instance
    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the preferred version of Terraform CLI 
    - name: 📦 Setup Terraform Cli
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false # keep it false to be able to read the outputs values of terraform

    #Check if the SSH key is empty
    - name: 🔎 Validate SSH Key is not empty
      run: |
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]
        then
          echo "SSH_PRIVATE_KEY is empty, you should add a SSH key to the repository secrets. Name of the secret should be SSH_PRIVATE_KEY"
          exit 1
        else
          echo "SSH_PRIVATE_KEY is not empty"
        fi
    

    - name: 🗒️ Create the SSH public key for VM
      run: |
        cat > temp_ssh_key <<EOF
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        
        chmod 400 temp_ssh_key
        ssh-keygen -f temp_ssh_key -y > temp_ssh_key.pub

        echo "SSH_KEY=$(cat temp_ssh_key.pub)" >> $GITHUB_ENV
        echo "SSH_KEY=${{env.SSH_KEY}}"

        echo "currentDate=$(date)" >> $GITHUB_ENV
        echo "currentDate=${{env.currentDate}}"


      # Generate random string for suffix
    - name: 🔎 Generate Random String for Resource Group Name
      id: resourcegroup-generator
      run: echo ResourceGroupName=${{env.AZ_RG_BASENAME}}-$(date +%s) >> $GITHUB_ENV 
    - run: echo ${{env.ResourceGroupName}}

    - name: 🗒️ Create a tfvars file for terraform
      run: |
        cat > terraform.tfvars <<EOF
        location = "${{env.AZ_LOCATION}}"
        resourcegroup_name = "${{env.ResourceGroupName}}"
        resourcegroup_tags = {
          "environment" = "dev"
          "project"     = "oracle"
          "created"     = "${{env.currentDate}}"
          "GITHUB_ACTOR" = "${{ github.actor }}"
          "GITHUB_ACTION_REPOSITORY" = "${{ github.repository }}"
          "GITHUB_ACTION_REF" = "${{ github.ref }}"
          "GITHUB_RUN_ID" = "${{ github.run_id }}"
          "GITHUB_WORKFLOW" = "${{ github.workflow }}"
        }
        is_resource_lock_enabled = false
        #is_diagnostic_settings_enabled = true
        #diagnostic_target              = "Log_Analytics_Workspace"
        
        ssh_key = "${{env.SSH_KEY}}"
        EOF

    #Login to Azure
    - name: 🔑 Login via Azure CLI
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: 📦 Terraform Init
      id: init
      env:
        RESOURCE_GROUP: ${{ env.ResourceGroupName }}
      run: terraform init


      # Run a terraform validate
    - name: 🔎 Terraform Validate
      id: validate
      if: github.ref != 'refs/heads/main'
      continue-on-error: true
      run: terraform validate -no-color
      

      # Run a terraform plan for pull requests only and add a comment 
    - name: 💻 Terraform Plan
      id: plan
      continue-on-error: true
      run: terraform plan -no-color



    - name: "◻️ Terraform Plan Status ⁉️"
      if: steps.plan.outcome == 'failure'
      run: exit 1

          # On push to main, build or change infrastructure according to Terraform configuration files
      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: 💻 Terraform Apply
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Remove when I am ready
      run: terraform apply -auto-approve 
    
    - name: 🔃 Terraform Refresh State
      run: terraform  apply -refresh-only -auto-approve

    - run: echo "vm_public_ip_address=$(terraform output vm_public_ip_address)" >> $GITHUB_ENV
    - run: echo ${{env.vm_public_ip_address}}


    outputs:
      ResourceGroupName: ${{ env.ResourceGroupName }}
      VM_Public_IP_Address: ${{ env.vm_public_ip_address }}


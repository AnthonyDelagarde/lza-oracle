name: Deploy Single Instance Oracle DB on Azure with Bicep and Ansible
on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/full-si-bicep-deploy.yml"
      - "bicep/bootstrap/single_instance/**"
      - "bicep_units/**"
      - "ansible/bootstrap/oracle/**"
  pull_request:
    branches: [ main ]
    paths:
      - ".github/workflows/full-si-bicep-deploy.yml"
      - "bicep/bootstrap/single_instance/**"
      - "bicep_units/**"
      - "ansible/bootstrap/oracle/**"
    
env:
  #TF_LOG: "INFO"
  AZ_LOCATION: "norwayeast" # can be parameterized
  AZ_RG_BASENAME: "Oracle-test" # can be parameterized

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write
  
jobs:
  bicep:
    name: 'üîß Bicep'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
  
    defaults:
      run:
        shell: bash
        working-directory: ./bicep/bootstrap
    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    #Check if the SSH key is empty
    - name: üîé Validate SSH Key is not empty
      run: |
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]
        then
          echo "SSH_PRIVATE_KEY is empty, you should add a SSH key to the repository secrets. Name of the secret should be SSH_PRIVATE_KEY"
          exit 1
        else
          echo "SSH_PRIVATE_KEY is not empty"
        fi
   

    - name: üóíÔ∏è Create the SSH public key for VM
      run: |
        cat > temp_ssh_key <<EOF
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        
        chmod 400 temp_ssh_key
        ssh-keygen -f temp_ssh_key -y > temp_ssh_key.pub

        echo "SSH_KEY=$(cat temp_ssh_key.pub)" >> $GITHUB_ENV
        echo "SSH_KEY=${{env.SSH_KEY}}"

        echo "currentDate=$(date)" >> $GITHUB_ENV
        echo "currentDate=${{env.currentDate}}"


      # Generate random string for suffix
    - name: üîé Generate Random String for Resource Group Name
      id: resourcegroup-generator
      run: echo ResourceGroupName=${{env.AZ_RG_BASENAME}}-$(date +%s) >> $GITHUB_ENV 
    - run: echo ${{env.ResourceGroupName}}

    - name: üóíÔ∏è Update the parameter file with run time values
      run: |
        # In the line "param resourceGroupName = 'oraGroup5'" replace oraGroup5 with the value of the variable ResourceGroupName
        sed -i "s/resourceGroupName = 'oraGroup5'/resourceGroupName = '${{env.ResourceGroupName}}'/g" single_instance/default/single_instance.bicepparam
        # In the line "sshPublicKey: '<sshKey>'' replace <sshKey> with the value of the variable SSH_KEY
        sed -i "s/sshPublicKey: '<sshKey>'/sshPublicKey: '${{env.SSH_KEY}}'/g" single_instance/default/single_instance.bicepparam

    # - name: üóíÔ∏è fixme update parameter file with public key
    #   run: |
    #     cat > terraform.tfvars <<EOF
    #     location = "${{env.AZ_LOCATION}}"
    #     resourcegroup_name = "${{env.ResourceGroupName}}"
    #     resourcegroup_tags = {
    #       "environment" = "dev"
    #       "project"     = "oracle"
    #       "created"     = "${{env.currentDate}}"
    #       "GITHUB_ACTOR" = "${{ github.actor }}"
    #       "GITHUB_ACTION_REPOSITORY" = "${{ github.repository }}"
    #       "GITHUB_ACTION_REF" = "${{ github.ref }}"
    #       "GITHUB_RUN_ID" = "${{ github.run_id }}"
    #       "GITHUB_WORKFLOW" = "${{ github.workflow }}"
    #     }
    #     is_resource_lock_enabled = false
    #     #is_diagnostic_settings_enabled = true
    #     #diagnostic_target              = "Log_Analytics_Workspace"
        
    #     ssh_key = "${{env.SSH_KEY}}"
    #     EOF

    #Login to Azure
    - name: üîë Login via Azure CLI
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy infrastructure
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        az deployment sub create --location ${{env.AZ_LOCATION}} --name ${{env.ResourceGroupName}} --template-file main.bicep --parameters ./single_instance/default/single_instance.bicepparam resourceGroupName=${{env.ResourceGroupName}}--verbose
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.

          # On push to main, build or change infrastructure according to Terraform configuration files
    #   # On push to main, build or change infrastructure according to Terraform configuration files
    # - name: üíª Terraform Apply
    # #  if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Remove when I am ready
    #   run: terraform apply -auto-approve 
    

    outputs:
      ResourceGroupName: ${{ env.ResourceGroupName }}
      VM_Public_IP_Address: ${{ env.vm_public_ip_address }}

##############################################################################################################################################
#                                     SSH Keys and parameter preparation for Ansible                                                         #
##############################################################################################################################################
#   ssh-keys:
#     needs: bicep
#     name: 'üßÆ Prepare and run Ansible Playbook'
#     runs-on: ubuntu-latest

#     defaults:
#       run:
#         shell: bash
#         working-directory: ansible/bootstrap/oracle
#     steps:
#       - name: üõí Checkout
#         uses: actions/checkout@v4

#       - name: üîé Check IP
#         run: echo "currentRunnerIP=$(curl https://api.ipify.org)" >> $GITHUB_ENV
#       - run: echo "currentRunnerIP=${{env.currentRunnerIP}}"
#       - run: echo "VM_Public_IP_Address=${{needs.terraform.outputs.VM_Public_IP_Address}}" >> $GITHUB_ENV
#       - run: echo "VM_Public_IP_Address=${{env.VM_Public_IP_Address}}"
      
#       - name: 'Install SSH Key'
#         uses: shimataro/ssh-key-action@v2
#         with: 
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           name: 'github_actions_id_rsa'
#           known_hosts: "sometin"
      
#       # Login to Azure CLI
#       - name: üîë Login via Azure CLI
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#       # Get Subscription ID
#       - name: üîé Get Subscription ID
#         id: subid
#         run: echo "SubscriptionID=$(az account show --query id -o tsv)" >> $GITHUB_ENV
#       - run: echo ${{env.SubscriptionID}} 
      
#       - name: ‚åõ Calculate endTimeUTC for JIT request 
#         run: echo "endTimeUtc=$(date -d '+2 hour' '+%FT%T')" >> $GITHUB_ENV
#       - run: echo "endTimeUtc=${{env.endTimeUtc}}"
#       - run: echo "ResourceGroupName=${{needs.terraform.outputs.ResourceGroupName}}" >> $GITHUB_ENV
#       - run: echo "ResourceGroupName=${{env.ResourceGroupName}}"
      
#       - name: üîë Login via Az Module
#         uses: azure/login@v1
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#           enable-AzPSSession: true 

#       - name: ‚úÖ Enable JIT on VM
#         uses: azure/powershell@v1
#         with:
#           inlineScript: |
#             $JitPolicyVm1 = (@{id="/subscriptions/${{env.SubscriptionID}}/resourceGroups/${{env.ResourceGroupName}}/providers/Microsoft.Compute/virtualMachines/vm-0"; ports=(@{number=22;endTimeUtc="${{env.endTimeUtc}}";allowedSourceAddressPrefix=@("${{env.currentRunnerIP}}")})})
#             $JitPolicyArr=@($JitPolicyVm1)
#             Start-AzJitNetworkAccessPolicy -ResourceId "/subscriptions/${{env.SubscriptionID}}/resourceGroups/${{env.ResourceGroupName}}/providers/Microsoft.Security/locations/${{env.AZ_LOCATION}}/jitNetworkAccessPolicies/JIT-SSH-Policy" -VirtualMachine $JitPolicyArr
#           azPSVersion: "latest"

#       - name: üßÆ Get Known Hosts parameter using ssh-keyscan
#         run: ssh-keyscan -T 300 -H ${{env.VM_Public_IP_Address}} >> /home/runner/.ssh/known_hosts

#       - name: üóíÔ∏è Create the inventory file
#         run: |
#           cat > inventory <<EOF
#           [dbservers]
#           ${{env.VM_Public_IP_Address}} ansible_ssh_private_key_file=/home/runner/.ssh/github_actions_id_rsa ansible_user=oracle
#           EOF

#       - name: üóíÔ∏è Show the inventory file
#         run: cat inventory

# ##############################################################################################################################################
# #                                    Ansible                                                                                                 #
# ##############################################################################################################################################
#       - name: 'üóíÔ∏èüíøüîß Invoke ansible playbook üò¥üò¥üò¥'
#         run: ansible-playbook playbook.yml -i inventory --extra-vars "data_guard=no"